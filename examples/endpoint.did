type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Result = variant { Ok : text; Err : text };
type RpcCallArgs = record {
  max_response_bytes : opt nat64;
  body : text;
  cycles : opt nat64;
};
type State = record { url : text; owner : principal; api_key : text };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : (text, text) -> {
  getInfo : () -> (State) query;
  rpcCall : (RpcCallArgs) -> (Result);
  setAPIKey : (text) -> (bool);
  setUrl : (text) -> (bool);
  transform : (TransformArgs) -> (HttpResponse) query;
}